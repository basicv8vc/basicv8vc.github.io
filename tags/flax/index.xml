<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Flax on Yet Another Blog</title>
    <link>https://basicv8vc.github.io/tags/flax/</link>
    <description>Recent content in Flax on Yet Another Blog</description>
    <image>
      <url>https://basicv8vc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://basicv8vc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 23 Jul 2022 00:07:00 +0000</lastBuildDate><atom:link href="https://basicv8vc.github.io/tags/flax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面向PyTorch用户的JAX简易教程[2]: 如何训练一个神经网络</title>
      <link>https://basicv8vc.github.io/posts/jax-tutorials-for-pytorchers-2/</link>
      <pubDate>Sat, 23 Jul 2022 00:07:00 +0000</pubDate>
      
      <guid>https://basicv8vc.github.io/posts/jax-tutorials-for-pytorchers-2/</guid>
      <description>背景 上一篇文章我们学习了JAX的基本知识，主要是几个关键词: NumPy API、transformations、XLA。这一篇来点实际的，看下如何训练一个神经网络，我们先回忆下用PyTorch训练神经网络，都需要哪几步：
 实现网络模型 实现数据读取流程 使用优化器/调度器更新模型参数/学习率 实现模型训练和验证流程  下面我们就以在MNIST数据集上训练一个MLP为例，看下在JAX中如何实现上面的流程。
NumPy API实现网络模型 MNIST是一个10分类问题，每张图片大小是 28 * 28=784 ，我们设计一个简单的MLP网络，
 一个四层MLP (包含输入层)   import jax from jax import numpy as jnp from jax import grad, jit, vmap  # 创建 PRNGKey (PRNG State) key = jax.random.PRNGKey(0)   ## 创建模型参数, 去除输入层，实际上三层Linear，每层都包含一组(w, b)，共三组参数  def random_layer_params(m, n, key, scale=1e-2):  &amp;#34;&amp;#34;&amp;#34; A helper function to randomly initialize weights and biases for a dense neural network layer &amp;#34;&amp;#34;&amp;#34;  w_key, b_key = jax.</description>
    </item>
    
  </channel>
</rss>
